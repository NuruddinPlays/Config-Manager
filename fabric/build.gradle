plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

base {
    archivesName = "ConfigManager-${project.name}-1.20.4-1.21.x"
}

configurations {
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"

    shadowBundle 'com.electronwill.night-config:toml:3.6.4'
    shadowBundle 'com.electronwill.night-config:json:3.6.4'
    modImplementation "maven.modrinth:modmenu:${project.modmenu_version}"
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier.set('dev-shadow')
    relocate 'com.electronwill.nightconfig', 'io.github.thebossmagnus.mods.config_manager.nightconfig'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}
