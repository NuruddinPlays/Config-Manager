plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

base {
    archivesName = "ConfigManager-${project.name}-1.21.5-1.21.8"
}

configurations {
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    shadowBundle 'com.electronwill.night-config:toml:3.6.4'
    shadowBundle 'com.electronwill.night-config:json:3.6.4'
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier.set('dev-shadow')
    relocate 'com.electronwill.nightconfig', 'io.github.thebossmagnus.mods.config_manager.nightconfig'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

loom {
    def aw = project(':common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName('Fabric Client')
            ideConfigGenerated(true)
            runDir('runs/client')
        }
        server {
            server()
            setConfigName('Fabric Server')
            ideConfigGenerated(true)
            runDir('runs/server')
        }
    }
}

unifiedPublishing {
    project {
        gameVersions = [
                "1.21.5",
                "1.21.6",
                "1.21.7",
                "1.21.8"
        ]
        gameLoaders = ["fabric", "quilt"]

        displayName = tasks.remapJar.archiveFile.get().asFile.name
        version = project.version
        releaseType = release_type

        mainPublication tasks.remapJar

        var cfToken = System.getenv("CF_TOKEN")
        if (cfToken != null) {
            curseforge {
                token = cfToken
                id = "1154099"
            }
        }

        var mrToken = System.getenv("MODRINTH_TOKEN")
        if (mrToken != null) {
            modrinth {
                token = mrToken
                id = "ix1qq8Ux"
            }
        }
    }
}
